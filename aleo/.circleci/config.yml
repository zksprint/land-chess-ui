version: 2.1

commands:
  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: aleo-stable-cache
    steps:
      - run: set -e
      - setup_remote_docker
      - run:
          name: Prepare environment and install dependencies
          command: |
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            wget https://github.com/mozilla/sccache/releases/download/0.2.13/sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-0.2.13-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-0.2.13-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            export RUSTC_WRAPPER="sccache"
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
            sudo apt-get update && sudo apt-get install -y clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
      - restore_cache:
          keys:
            - << parameters.cache_key >>

  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: aleo-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo

  run_serial:
    description: "Build and run tests"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 30m
          command: cd << parameters.workspace_member >> && RUST_MIN_STACK=67108864 cargo test << parameters.flags >>
      - clear_environment:
          cache_key: << parameters.cache_key >>

  run_parallel:
    description: "Build and run tests (in parallel)"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 30m
          command: |
            cd << parameters.workspace_member >>
            cargo test -- --list --format terse | sed 's/: test//' > test_names.txt
            TEST_NAMES=$(circleci tests split test_names.txt)
            for i in $(echo $TEST_NAMES | sed "s/ / /g")
            do
                RUST_MIN_STACK=67108864 cargo test $i << parameters.flags >>
            done
      - clear_environment:
          cache_key: << parameters.cache_key >>

jobs:
  rust_stable:
    docker:
      - image: cimg/rust:1.70
    resource_class: xlarge
    steps:
      - run_serial:
          workspace_member: .
          cache_key: aleo-stable-cache

  wasm:
    docker:
      - image: cimg/rust:1.70
    resource_class: 2xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: aleo-wasm-cache
      - run:
          no_output_timeout: 30m
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 18.16.0
            nvm use 18.16.0
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            cd wasm && wasm-pack test --node --lib
            # cargo test --target wasm32-unknown-unknown
            wasm-pack build --target nodejs
            npm install --global typescript
            npm install --global yarn
            cd ../sdk && yarn install
            sleep 5
            yarn test
      - clear_environment:
          cache_key: aleo-wasm-cache

  check-fmt:
    docker:
      - image: cimg/rust:1.70
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: aleo-fmt-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: |
            rustup toolchain install nightly-x86_64-unknown-linux-gnu
            cargo +nightly fmt --all -- --check
      - clear_environment:
          cache_key: aleo-fmt-cache

  check-clippy:
    docker:
      - image: cimg/rust:1.70
    resource_class: 2xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: aleo-clippy-cache
      - run:
          name: Check lint
          no_output_timeout: 35m
          command: |
            cargo clippy --workspace --all-targets --all-features --exclude aleo-wasm
            cargo clippy -p aleo-wasm --all-targets --features serial
      - clear_environment:
          cache_key: aleo-clippy-cache

  aleo-deploy-and-execute:
    docker:
      - image: cimg/rust:1.70
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: aleo-executable-cache
      - run:
          name: Install snarkos and test deploy & execute
          no_output_timeout: 30m
          command: |
            sudo apt install git-all
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 18.16.0
            nvm use 18.16.0
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
            cd wasm
            wasm-pack build --target nodejs -- --features serial --no-default-features
            cd ..
            npm install --global typescript
            npm install --global yarn
            git clone https://github.com/AleoHQ/snarkOS.git
            cargo install --path snarkOS --root . --locked
            rm -rf snarkOS
            ./bin/snarkos start --dev 0 --beacon APrivateKey1zkp8CZNn3yeCseEtxuVPbDCwSyhGW6yZKUYKfgXmcpoGPWH --nodisplay 1> /dev/null &
            cargo install --path rust/develop --root . --locked
            ./bin/aleo-develop start --server-address 0.0.0.0:4040 --peer http://localhost:3030 -d 1> /dev/null &
            ./bin/aleo-develop start --server-address 0.0.0.0:5050 --peer http://localhost:3030 -d -k ciphertext1qvqgkey2cxklg4g5qjnkk4dy50zypte5ewp5kwdm9pt833eyext32pu07dgkxqzmn0wnpxx8kvh2phws6j5njsu6zrys20xpvqmqhw9gpngs50mpe9e0nkp6uyzctzdq3fs2n4p9d3kvaps6mg6xu0sef0xpzm028m7 1> /dev/null &
            sleep 15
            cd rust
            cargo test test_mappings_query -- --ignored --nocapture --test-threads=1
            cargo test test_transfer_roundtrip -- --ignored --nocapture --test-threads=1
            cargo test test_deploy -- --ignored --nocapture --test-threads=1
            cargo test test_execution -- --ignored --nocapture --test-threads=1
            cd ../sdk && yarn install
            sleep 5
            yarn integration

  aleo-executable:
    docker:
      - image: cimg/rust:1.70
    resource_class: xlarge
    steps:
      - checkout
      - setup_environment:
          cache_key: aleo-executable-cache
      - run:
          name: Build and install Aleo CLI
          no_output_timeout: 30m
          command: |
            cargo install --path . --root . --locked
            export ALEO=/home/circleci/project/bin/aleo
            ./.circleci/aleo-new.sh

      - persist_to_workspace:
          root: ~/
          paths:
            - project/
      - clear_environment:
          cache_key: aleo-executable-cache

workflows:
  version: 2

  main-workflow:
    jobs:
      - rust_stable
      - wasm
      - check-fmt
      - check-clippy
      - aleo-executable
      - aleo-deploy-and-execute
